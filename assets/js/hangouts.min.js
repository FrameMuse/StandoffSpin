String.prototype.intConvert = function () { return parseInt(this, 10) }, String.prototype.num_split = function () { for (var e = [], a = this.toString(), b = a.length, c = 0; c < b; c++)e.push(+a.charAt(c)); return e }, $.fn.extend({ toggleText: function (b, c = null) { return this.html(this.html() == c ? b : c) }, num_split: function () { for (var e = [], a = this.text().toString(), b = a.length, c = 0; c < b; c++)e.push(+a.charAt(c)); return e } }), $(".faq__summary").click(function () { $(this).parent().toggleClass("faq__clause--deployed") }), $(".tab-swithcer__button").click(function () { $(".tab-swithcer__button").removeClass("tab-swithcer__button--active"); var b = $(this).addClass("tab-swithcer__button--active").attr("tab"); $("[class *= 'js-tab-']").addClass("hidden"), $("[class *= 'js-tab-" + b + "']").removeClass("hidden") }), $(document).on("click", ".sorted-skins .sorted-skins__unit[pickable]", function () { features.contract.spot.takePlace($(this)), features.contract.update_DOM() }), $(document).on("click", ".contract__spot .sorted-skins__unit[pickable]", function () { features.contract.spot.freeUpPlace($(this)), features.contract.update_DOM() }); class features_lang { constructor() { this.tap = "rus", this.onclick = function () { }, this.path = "/assets/img/icons/", this, $(".js-option-lang").click(() => { var b = this.toggleTap("ru", "en"); $(".topbar-language__icon").css({ "background-image": `url(${this.path + b + ".png"})` }), $(".topbar-language__text").html(b), this.onclick(b) }) } toggleTap(b, c = null) { return this.tap = this.tap == c ? b : c } } class features_sound { constructor() { this.tap = "on", this.onclick = function () { }; const b = this; $(".js-option-volume").click(function () { $(this).find(".stndfspin-features__icon").toggleClass("stndfspin-button--unfilled").toggleClass("stndfspin-features__icon--green").parent().find(".stndfspin-features__column > span").toggleText("\u0412\u043A\u043B.", "\u0412\u044B\u043A\u043B."), b.onclick(b.toggleTap("on", "off")) }) } toggleTap(b, c = null) { return this.tap = this.tap == c ? b : c } } class features_timer { constructor() { this.data = { numbers: { seconds: 0, minutes: 0, hours: 0 } } } counts(b = "") { return $(".timer-v2__count[data-count='" + b + "']").find("span") } async initiate(d = {}, a = 1) { return this.data.numbers = d, this.promise = new Promise(b => { var c = setInterval(() => { if (this.single_discount("seconds", 59) && this.single_discount("minutes", 59) && this.single_discount("hours", 24)) return clearInterval(c), void b(); for (const a in d) this.counts(a).each(function (b) { $(this).html(num_split(d[a], 2)[b]) }) }, 1e3 / a) }), await this.promise } single_discount(c = "", a = 0) { return null == this.data.numbers[c] || (0 >= this.data.numbers[c] ? (this.data.numbers[c] = a, !0) : void this.data.numbers[c]--) } } class features_wheel { constructor() { $(document).on("click", ".fortune-wheel[data-id='1']  .js-wheel-reopen", () => { $(".fortune__circle, .fortune-wheel__inner, .fortune-wheel__curve-1, .fortune-wheel__curve-2").toggleClass("hidden"), $(".fortune-wheel").removeClass("fortune-wheel--without-after"), this.reopen.onclick() }), $(".box__input").click(function () { $(".box__input").removeClass("box__input--active"), $(this).addClass("box__input--active") }) } init() { this.multiple({ 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 10 }[$(".box__input--active").attr("data-id")]), this.count(18), this.switch(); var d = {}; $(".fortune__circle > *").each(function (a, b) { d[a] = $(b) }), this.reopen = { onclick: function () { } }, this.data = { points: d, spins: 4, animation: $(".fortune__circle").css("transition"), duration: 14 } } getRotationDegrees(g) { var c = g.css("-webkit-transform") || g.css("-moz-transform") || g.css("-ms-transform") || g.css("-o-transform") || g.css("transform"); if ("none" !== c) var d = c.split("(")[1].split(")")[0].split(","), e = d[0], f = d[1], a = Math.round(Math.atan2(f, e) * (180 / Math.PI)); else var a = 0; return 0 > a ? a + 360 : a } spinTo(e) { var a = this.data.points[e], b = 360 * this.data.spins - this.getRotationDegrees(a), c = a.parent(); return c.css({ transform: "", transition: "unset", animation: "unset" }), setTimeout(() => { c.css({ transform: "rotate(" + b + "deg)", transition: this.data.animation }) }, 200), a } checkUp(e, a = 0) { return console.log(a), this.promise = new Promise(b => { setTimeout(() => { var c = setInterval(() => { if (360 == this.getRotationDegrees(e) + this.getRotationDegrees($(".fortune-wheel[data-id='" + a + "'] .fortune__circle"))) return clearInterval(c), void b() }, 500) }, 1e3 * this.data.duration) }) } async win(e = {}, a = 1) { var b = this.spinTo(e.id + this.number * a), c = b.parent().parent(); return setTimeout(() => { b.find(".weapon-skins__image").attr({ src: e.skin.image }), b.find(".sorted-skins__skin-title").html(e.skin.title), c.find(".fortune-wheel__inner--0 .weapon-skins__image").attr({ src: e.skin.image }), c.find(".fortune-wheel__inner--0 .sorted-skins__skin-title").html(e.skin.title) }, 3e3), await this.checkUp(b, +a + 1), $(".fortune__circle, .fortune-wheel__inner, .fortune-wheel__curve-1, .fortune-wheel__curve-2").toggleClass("hidden"), $(".fortune-wheel").addClass("fortune-wheel--without-after"), this.promise } async multiple_win(c = {}) { for (const a in c) this.win(c[a], a) } count(c) { this.number = c; var a = +$(".fortune__item").css("height").replace("px", ""); console.log("You have " + c + " block in it"), console.log("Each block has " + 360 / c + " degrees"), console.log("Each block has " + 114 / (360 / c) + " ratio"), console.log("Each block width is " + a / (114 / (360 / c)) + "px"), $(".fortune__item").each(function (a) { $(this).css({ transform: "rotate(" + 360 / c * a + "deg) translateY(var(--wheel-indent))" }) }), $(".fortune-wheel").css({ "--wheel-item-skew": a / (114 / (360 / c)) + "px", "--wheel-underline-width": "calc(0.625em / " + 114 / (360 / c) + ")" }) } multiple(e) { this.tideUp(); for (var a = $(".fortune-wheel"), b = a.parent(), c = 0; c < e; c++)b.append(a.clone().attr("data-id", c + 1)); $(".fortune-wheel:not([data-id])").remove(), 1 < e ? $(".fortune-wheel__buttons").addClass("hidden") : $(".fortune-wheel__buttons").removeClass("hidden"), 2 == e && $(".box").css("--wheel-font-size", "6px"), 3 <= e && $(".box").css("--wheel-font-size", "3.125px") } tideUp() { $(".box").css("--wheel-font-size", ""), $(".fortune-wheel").each(function (b) { 0 != b && $(this).remove() }) } switch() { $(".box__view, .fortune-wheel").toggleClass("hidden") } } class features_popup { constructor() { this.html = `<div class="popup" hidden="hidden"><div class="popup__cover"></div><div class="popup-window scale-out"><div class="popup-window__close">✖</div><div class="popup-window__article"><span class="popup-window__title"></span><span class="popup-window__summary"></span></div><div class="popup-window__content"></div><div class="popup-window__help">Есть вопросы? Пишите в <a href="https://vk.com/standoffroll" classname="popup-window__marked">группу поддержки VK</a></div></div></div>`, this.on = function () { }, this.getLanguage = function () { }, this.default() } default() { 0 == $(".popup").length && $("body").append(this.html), $(".popup-window__close, .popup__cover").click(() => { features.popup.fadeOut() }) } tend(b) { return $(".popup-window__" + b) } wEdit(c = {}) { for (var a in c) this.tend(a).html(c[a]) } fadeIn(b) { $(".popup").removeAttr("hidden"), setTimeout(() => { b.removeClass("scale-out scale-in").addClass("scale-in") }, 50) } fadeOut() { var b = $(".popup"); b.find("> *:not(.popup__cover)").removeClass("scale-out scale-in").addClass("scale-out"), setTimeout(() => b.attr("hidden", ""), 200) } open(c, a = {}) { this.wText = function (a) { return this.getLanguage("popup." + c + "." + a) }, this.title = this.wText("title"), this.summary = this.wText("summary"), this.wEdit({ title: null, summary: null, content: null, help: this.getLanguage("popup.help.html") }), this.on(c, a), this.fadeIn($(".popup-window")) } close() { $(".popup-window__close, .popup__cover").click() } } class features_referal { init() { this.name = name, this.default(), this.progress_block = "<div class=\"goal__line\"><div class=\"goal__line--line-progress\"></div><div class=\"goal__counter\"><span class=\"goal__counter--icon\"></span><span class=\"goal__counter--amount\"></span></div></div>", this.commit_progress(2, 89) } default() { this.goals_number = $(".goal").length, this.width = $(this.name).outerWidth(), this.goal_width = $(".goal").outerWidth(), this.goal_height = $(".goal__image").outerHeight(), this.goal_indent = $(".goal[data-goal-id='2']").css("margin-left").replace("px", "").intConvert(), this.goal_image = $(".goal__image").outerWidth(), this.goal_goal_height = $(".goal__goal").outerHeight() } create_progress_block() { return 1 >= this.goals_number ? void console.error("Too few elements at the page (" + this.goals_number + ")") : void $(this.name).append(this.progress_block) } create_goal(g, a, b, c, d = "") { if (d) var d = "goal__reached"; var h = "<div class=\"goal " + d + "\" data-goal-id=\"" + this.goals_number + "\"><div class=\"goal__goal\">" + g + "</div><div class=\"goal__image\"><img class=\"goal__image--image\" src=\"" + b + "\"></div><div class=\"goal__level\">" + a + "</div><div class=\"goal__rewards\">" + c + "</div>"; return this.goals_number++ , h } add_goal(c) { var a = this.create_goal(c.goal, c.level, c.image, c.rewards, c.reached); $(this.name).append(a) } get_progress(e, a) { var f = this.goal_width + this.goal_indent, a = a / 100, c = f * e - f + this.goal_width + f * a - f; return c } commit_progress(e, a, b) { var c = this.get_progress(e, a); return c > this.width ? (console.log(c), console.error("Commited line is too big for '" + this.name + "'"), c + "px") : (0 > c && (c = 0), 1 >= this.goals_number ? void console.error("Too few elements at the page (" + this.goals_number + ")") : void (70 <= a && 100 >= a || 30 <= a && 2 >= a ? $(".goal__counter").addClass("hidden") : $(".goal__counter").removeClass("hidden"), b && $(".goal__counter--amount").html(b), $(".goal__line--line-progress").css("width", c + "px"), $(".goal__counter").css("left", c - $(".goal__counter").outerWidth() / 2 + "px"), $(".goal__line").css("top", this.goal_image_indent + this.goal_goal_height + this.goal_height / 2 + "px"))) } } class features_contract { constructor() { this.onpop = function () { }, this.spot = new class { constructor() { this.error = function () { }, this.saf = !0, this.spots = [], $(".contract__spot").each((c, a) => { this.spots.push({ status: "unoccupied", object: a, data: { title: null, amount: null } }), $(a).attr("data-id", c) }) } takePlace(d) { var a = this.whichAvail().shift(), b = this.setOcp(a); b && (d.clone().appendTo(b), this.data("get", a), d.remove(), this.caution()) } freeUpPlace(c) { var a = c.parent().attr("data-id"); this.setUnocp(a) && (c.clone().appendTo($(".sorted-skins")), this.data(null, a), c.remove(), this.caution()) } whichAvail(d = "unoccupied") { for (var a = [], b = 0; b < this.spots.length; b++)this.spots[b].status == d && a.push(b); return a } setOcp(b) { try { return this.spots[b].status = "occupied", this.spots[b].object } catch (b) { return this.error("Exceeded_index_range"), !1 } } setUnocp(b) { try { return this.spots[b].status = "unoccupied", this.spots[b].object } catch (b) { return this.error("Exceeded_index_range"), !1 } } data(c, d) { switch (c) { case "get": try { const b = this.spots[d].object; this.spots[d].data = { title: $(b).find(".sorted-skins__skin-title").html(), amount: $(b).find(".sorted-skins__cost").html().replace(" P", "") } } catch (b) { this.error("lack_title_or_cost") } break; case null: this.spots[d].data = { title: null, amount: null }; } } caution() { var b = this.whichAvail("occupied"); 3 <= b.length ? ($(".contract__caution").hide(), this.saf = !1) : ($(".contract__caution").show(), this.saf = !0) } } } init() { features.canvas.init(), $(".contract-window").appendTo(".popup").removeClass("hidden"), $(".contract__button").click(() => !0 == this.spot.saf ? void this.onpop() : void (features.popup.fadeIn($(".contract-window")), this.fill())) } fill() { for (var c = 0, d = 0; c < this.spot.spots.length; c++)$(".contract-window__table--row:nth-child(" + (c + 1) + ") .js-contract-row").html(this.spot.spots[c].data.title), "occupied" == this.spot.spots[c].status && (d += +this.spot.spots[c].data.amount) } count_sum() { for (var c = 0, d = 0; c < this.spot.spots.length; c++)"occupied" == this.spot.spots[c].status && (d += +this.spot.spots[c].data.amount); return d } update_DOM() { $(".js-contract-items").html(this.spot.whichAvail("occupied").length), $(".js-contract-sum").html(this.count_sum()) } } class features_canvas { init() { this.isMouseDown = !1, this.canvas_out = $(".contract-window__canvas"), this.canvas = this.canvas_out[0], this.canvas.width = this.canvas_out.outerWidth(), this.canvas.height = this.canvas_out.outerHeight(), this.body = $("body"), this.canvas, this.ctx = this.canvas.getContext("2d"), this.linesArray = [], this.currentSize = 1, this.currentColor = "rgb(225,225,225)", this.currentBg = "white", this.canvas.addEventListener("mousedown", () => { this.mousedown(this.canvas, event) }), this.canvas.addEventListener("mousemove", () => { this.mousemove(this.canvas, event) }), this.canvas.addEventListener("mouseup", () => { this.mouseup() }) } save() { localStorage.removeItem("savedCanvas"), localStorage.setItem("savedCanvas", JSON.stringify(this.linesArray)), console.log("Saved canvas!") } redraw() { for (var b = 1; b < this.linesArray.length; b++)this.ctx.beginPath(), this.ctx.moveTo(this.linesArray[b - 1].x, this.linesArray[b - 1].y), this.ctx.lineWidth = this.linesArray[b].size, this.ctx.lineCap = "round", this.ctx.strokeStyle = this.linesArray[b].color, this.ctx.lineTo(this.linesArray[b].x, this.linesArray[b].y), this.ctx.stroke() } getMousePos(d, a) { var b = this.canvas.getBoundingClientRect(); return { x: a.clientX - b.left, y: a.clientY - b.top } } mousedown(d, a) { this.getMousePos(this.canvas, a), this.isMouseDown = !0; var b = this.getMousePos(this.canvas, a); this.ctx.moveTo(b.x, b.y), this.ctx.beginPath(), this.ctx.lineWidth = this.currentSize, this.ctx.lineCap = "round", this.ctx.strokeStyle = this.currentColor } mousemove(d, a) { if (this.isMouseDown) { var b = this.getMousePos(this.canvas, a); this.ctx.lineTo(b.x, b.y), this.ctx.stroke(), this.store(b.x, b.y, this.currentSize, this.currentColor) } } store(c, a, b, d) { this.linesArray.push({ x: c, y: a, size: b, color: d }) } mouseup() { this.isMouseDown = !1, this.store(), this.redraw() } downloadCanvas(d, a, b) { d.href = document.getElementById(a).toDataURL(), d.download = b } } const features = new class { constructor() { this.sound = new features_sound, this.lang = new features_lang, this.timer = new features_timer, this.wheel = new features_wheel, this.popup = new features_popup, this.referal = new features_referal, this.contract = new features_contract, this.canvas = new features_canvas } }; function num_split(g = 0, a = 0) { for (var h = g.toString(), c = h.length, a = c >= a ? 0 : a - c, d = Array(a).fill(0), e = 0; e < c; e++)d.push(+h.charAt(e)); return d }